"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[3758],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),h=c(n),d=a,m=h["".concat(l,".").concat(d)]||h[d]||u[d]||s;return n?r.createElement(m,o(o({ref:t},p),{},{components:n})):r.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[h]="string"==typeof e?e:a,o[1]=i;for(var c=2;c<s;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5756:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const s={},o="Filters",i={unversionedId:"ansible/filters",id:"ansible/filters",title:"Filters",description:"Use-case - extract text from html",source:"@site/docs/ansible/filters.md",sourceDirName:"ansible",slug:"/ansible/filters",permalink:"/docusaurus/docs/ansible/filters",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ansible/filters.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Extending Ansible",permalink:"/docusaurus/docs/ansible/extending-ansible"},next:{title:"Inventory Plugins",permalink:"/docusaurus/docs/ansible/inventory-plugins"}},l={},c=[{value:"Use-case - extract text from html",id:"use-case---extract-text-from-html",level:2},{value:"regex_search",id:"regex_search",level:3},{value:"regex_replace",id:"regex_replace",level:3},{value:"Use-case - search for text in json",id:"use-case---search-for-text-in-json",level:2}],p={toc:c};function h(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"filters"},"Filters"),(0,a.kt)("h2",{id:"use-case---extract-text-from-html"},"Use-case - extract text from html"),(0,a.kt)("p",null,"This was developed to perform post-deployment verification against a RESTful service. The tomcat app startup script would always return before the application was ready to serve traffic and also there is a belt-and-braces check against a version endpoint to check that the url is serving the version on the application we believe should have just been deployed. The ",(0,a.kt)("a",{parentName:"p",href:"https://docs.ansible.com/ansible/latest/modules/uri_module.html"},"uri")," module handles getting what is unfortunately in this case html, then we need to extract the application version from the content. Cue Ansible ",(0,a.kt)("a",{parentName:"p",href:"https://docs.ansible.com/ansible/latest/user_guide/playbooks_filters.html#regular-expression-filters"},"Filters")),(0,a.kt)("h3",{id:"regex_search"},"regex_search"),(0,a.kt)("p",null,"regex_search can perform the search and return the matched string. I won't share the whole html here, but note there are multiple versions in the html with no unique IDs on any of the elements. So how to extract just the application version? Although in python we can get this using a single regex and a match group, regex_search cannot return just the match group, only the whole match."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},"<li>application version : 7.12.0-SNAPSHOT</li>\n")),(0,a.kt)("p",null,"We can do this in two simple steps using regex_search, the first filter matches the project version and sets that as a fact which we can search again and this time there is only one version number in the string to be searched and extracting the version number is now easy with a second regex."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"    - name: extract version element from response\n      set_fact:\n        deployed_application_version_element: \"{{ response | regex_search('application version : ([\\\\w\\\\.\\\\-]+)') }}\"\n\n    - name: extract version string from element\n      set_fact:\n        deployed_application_version: \"{{ deployed_application_version_element | regex_search('(\\\\d+.*$)') }}\"\n\n    - name: check facts\n      debug:\n        var: deployed_application_version\n")),(0,a.kt)("p",null,"!!! note\nAnsible (2.6) does not support having both facts set in a single task. The following code prodeces the error below because the first fact is not set when the second fact tries to reference it. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'```yaml\n    - name: extract versions from response\n      set_fact:\n        deployed_application_version_element: "{{ response | regex_search(\'application version : ([\\\\w\\\\.\\\\-]+)\') }}"\n        deployed_application_version: "{{ deployed_application_version_element | regex_search(\'(\\\\d+.*$)\') }}"\n\n```\n```bash\nTASK [extract versions from response]  *****************************************************************************************\nfatal: [localhost]: FAILED! => {"msg": "Unexpected templating type error occurred on ({{ deployed_application_version_element | regex_search(\'(\\\\\\\\d+.*$)\') }}): expected string or buffer"}\n```\nThe error is clearer if we drop the regex_search filter from the second fact, although as always we must read the Ansible error message carefully and fully.\n```yaml\n    - name: extract versions from response\n      set_fact:\n        deployed_application_version_element: "{{ response | regex_search(\'application version : ([\\\\w\\\\.\\\\-]+)\') }}"\n        deployed_application_version: "{{ deployed_application_version_element }}"\n\n```\n```bash\nTASK [extract versions from response] *****************************************************************************************\nfatal: [localhost]: FAILED! => {"msg": "The task includes an option with an undefined variable. The error was: \'deployed_project_version_match\' is undefined\\n\\nThe error appears to have been in \'/Users/agar/code/agarthetiger/ansible/check-version.yml\': line 9, column 7, but may\\nbe elsewhere in the file depending on the exact syntax problem.\\n\\nThe offending line appears to be:\\n\\n\\n    - name: extract versions from response\\n      ^ here\\n"}\n')),(0,a.kt)("h3",{id:"regex_replace"},"regex_replace"),(0,a.kt)("p",null,"It would be elegant to get this in one step and we can do that with regex_replace, where the replacement string can reference match groups. We need to modify the original regex slightly so the entire string is matched, in order for just the replacement match group to become the returned string. "),(0,a.kt)("p",null,"Lets break the regex down."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The leading ",(0,a.kt)("inlineCode",{parentName:"li"},"^.*")," and trailing ",(0,a.kt)("inlineCode",{parentName:"li"},".*?$")," ensure that the whole string is matched and replaced by the match group"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"application version :")," matches the text in the list html element for the version we're interested in "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"([\\w\\.\\-])")," matches any word character (letters, numbers and underscore) plus dot and hyphen and the round brackets around this expression mark it as the first (and only) match group.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"    - name: extract application version from response\n      set_fact:\n        deployed_application_version: \"{{ response | regex_replace('^.*application version : ([\\\\w\\\\.\\\\-]+).*?$', '\\\\1') }}\"\n")),(0,a.kt)("p",null,"Online tools like ",(0,a.kt)("a",{parentName:"p",href:"https://pythex.org/"},"pythex.org")," can be useful for quickly testing regular expressions. "),(0,a.kt)("p",null,"!!! danger\nBe very careful about what you paste into online tools like this. Always triple check that you are never sharing anything sensitive and if in doubt test a rexeg locally, even if it is more cumbersome. Security is never worth risking for speed. "),(0,a.kt)("h2",{id:"use-case---search-for-text-in-json"},"Use-case - search for text in json"),(0,a.kt)("p",null,"A RESTful API returned a json payload which we needed to search through for a name stored in a variable. "),(0,a.kt)("p",null,"This didn't work, the variable ",(0,a.kt)("inlineCode",{parentName:"p"},"{{ check_control_plane }}")," was never interpolated so the name was never found even when it was present. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"- name: set fact with controlplane check\n  set_fact:\n      pingdom_controlplane_check: \"{{ pingdom_checks.json.checks | json_query('[?name==`{{ check_controlplane_name }}`]') | list }}\"\n")),(0,a.kt)("p",null,"This does work as expected."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'  - name: set fact with controlplane check\n    set_fact:\n      pingdom_controlplane_check: "{{ pingdom_checks.json.checks | json_query(query) | list }}"\n    vars:\n      query: "[?name==\'{{ check.controlplane.name }}\']"\n')))}h.isMDXComponent=!0}}]);